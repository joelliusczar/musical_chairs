"""
This type stub file was generated by pyright.
"""

from io import BufferedIOBase
from typing import Any, Callable, Dict, List, Literal, Optional, Set


DEBUG: str | Literal[False] = ...
class TinyTagException(LookupError):
    ...


def stderr(*args: List[str]) -> None:
    ...

class TinyTag:
    title: Optional[str]
    artist: Optional[str]
    albumartist: Optional[str]
    album: Optional[str]
    year: Optional[int]
    track: Optional[int]
    disc: Optional[int]
    bitrate: Optional[float]
    comment: Optional[str]
    genre: Optional[str]
    def __init__(self, filehandler: Optional[str], filesize: int, ignore_errors: bool=...) -> None:
        ...
    
    def as_dict(self) -> dict[str, Any]:
        ...
    
    @classmethod
    def is_supported(cls, filename: str) -> bool:
        ...
    
    def get_image(self) -> Any:
        ...
    
    @classmethod
    def get_parser_class(cls, filename: str, filehandle: BufferedIOBase) -> TinyTag:
        ...
    
    @classmethod
    def get(cls, \
        filename: str, \
        tags: bool=..., \
        duration: bool=..., \
        image: bool=..., \
        ignore_errors: bool=..., \
        encoding: Optional[str]=...
    ) -> TinyTag:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def load(self, tags: bool, duration: float, image: bool=...) -> None:
        ...
    
    def update(self, other: TinyTag) -> None:
        ...
    


class MP4(TinyTag):
    class Parser:
        ATOM_DECODER_BY_TYPE: Dict[int, Callable[[Any], str | int | float] ] = ...
        @classmethod
        def make_data_atom_parser(cls, fieldname: str) -> Callable[[Any], dict[str, str | int | float]]:
            ...
        
        @classmethod
        def make_number_parser(cls, fieldname1: str, fieldname2: str) -> Callable[[bytes], dict[str, Any]]:
            ...
        
        @classmethod
        def parse_id3v1_genre(cls, data_atom: Any) -> dict[str, str | None]:
            ...
        
        @classmethod
        def parse_audio_sample_entry(cls, data: Any) -> dict[str, int | float]:
            ...
        
        @classmethod
        def parse_mvhd(cls, data: Any) -> dict[str, float]:
            ...
        
        @classmethod
        def debug_atom(cls, data: Any) -> dict[Any, Any]:
            ...
        
    
    
    META_DATA_TREE: Dict[Any, Any] = ...
    AUDIO_DATA_TREE: Dict[Any, Any] = ...
    IMAGE_DATA_TREE: Dict[Any, Any] = ...
    VERSIONED_ATOMS: Set[Any] = ...
    FLAGGED_ATOMS: Set[Any] = ...


class ID3(TinyTag):
    FRAME_ID_TO_FIELD: Dict[str, str] = ...
    IMAGE_FRAME_IDS: Set[str] = ...
    PARSABLE_FRAME_IDS: Set[str] = ...
    _MAX_ESTIMATION_SEC: int = ...
    _CBR_DETECTION_FRAME_COUNT: int = ...
    _USE_XING_HEADER: bool = ...
    ID3V1_GENRES: List[str] = ...
    def __init__(self, filehandler: str, filesize: float, *args: List[Any], **kwargs: Dict[Any, Any]) -> None:
        ...
    
    @classmethod
    def set_estimation_precision(cls, estimation_in_seconds: float) -> None:
        ...
    
    samplerates: List[List[int]] = ...
    v1l1: List[int] = ...
    v1l2: List[int] = ...
    v1l3: List[int] = ...
    v2l1: List[int] = ...
    v2l2: List[int] = ...
    v2l3: List[int] = ...
    bitrate_by_version_by_layer: List[Optional[List[Any]]] = ...
    samples_per_frame: int = ...
    channels_per_channel_mode: List[int] = ...
    @staticmethod
    def index_utf16(s: Any, search: Any) -> int:
        ...
    


class Ogg(TinyTag):
    def __init__(self, filehandler: str, filesize: float, *args: List[Any], **kwargs: Dict[Any, Any]) -> None:
        ...
    


class Wave(TinyTag):
    riff_mapping: Dict[Any, str] = ...
    def __init__(self, filehandler: str, filesize: float, *args: List[Any], **kwargs: Dict[Any, Any]) -> None:
        ...
    


class Flac(TinyTag):
    METADATA_STREAMINFO: int = ...
    METADATA_PADDING: int = ...
    METADATA_APPLICATION: int = ...
    METADATA_SEEKTABLE: int = ...
    METADATA_VORBIS_COMMENT: int = ...
    METADATA_CUESHEET: int = ...
    METADATA_PICTURE: int = ...
    def load(self, tags: bool, duration: float, image: bool=...) -> None:
        ...
    


class Wma(TinyTag):
    ASF_CONTENT_DESCRIPTION_OBJECT: Any = ...
    ASF_EXTENDED_CONTENT_DESCRIPTION_OBJECT: Any = ...
    STREAM_BITRATE_PROPERTIES_OBJECT: Any = ...
    ASF_FILE_PROPERTY_OBJECT: Any = ...
    ASF_STREAM_PROPERTIES_OBJECT: Any = ...
    STREAM_TYPE_ASF_AUDIO_MEDIA: Any = ...
    def __init__(self, filehandler: str, filesize: float, *args: List[Any], **kwargs: Dict[Any, Any]) -> None:
        ...
    
    def read_blocks(self, fh: Any, blocks: Any) -> dict[Any, Any]:
        ...
    


class Aiff(ID3):
    def __init__(self, filehandler: str, filesize: float, *args: List[Any], **kwargs: Dict[Any, Any]) -> None:
        ...
    


